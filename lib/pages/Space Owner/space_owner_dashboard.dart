import 'dart:convert'; // Import for JSON and base64 encoding/decoding utilities
import 'dart:typed_data'; // Import for handling binary data (Uint8List)

import 'package:firebase_auth/firebase_auth.dart'; // Firebase authentication library
import 'package:flutter/material.dart'; // Core Flutter framework
import 'package:cloud_firestore/cloud_firestore.dart'; // Firebase Firestore library

class SpaceOwnerDashboard extends StatefulWidget {
  const SpaceOwnerDashboard(
      {super.key}); // Stateful widget for space owner dashboard

  @override
  _SpaceOwnerDashboardState createState() => _SpaceOwnerDashboardState();
}

class _SpaceOwnerDashboardState extends State<SpaceOwnerDashboard> {
  int bookingCount = 0; // Count of bookings for owned spaces
  int feedbackCount = 0; // Count of feedbacks for owned spaces
  double revenue = 0.0; // Total revenue generated by owned spaces
  bool isLoading = true; // Loading state to show progress indicator
  Uint8List? imageBytes; // Stores decoded image bytes from base64

  // Fetch transaction details (bookings + user data) for the given space IDs
  Future<List<Map<String, dynamic>>> fetchTransactions(
      List<String> spaceIds) async {
    try {
      final FirebaseFirestore firestore = FirebaseFirestore.instance;

      // Step 1: Fetch bookings with successful payments for the given spaceIds
      final bookingsSnapshot = await firestore
          .collection('bookings')
          .where('spaceId', whereIn: spaceIds)
          .where('paymentStatus', isEqualTo: 'Success')
          .get();

      // Step 2: Collect user IDs from bookings
      final List<Map<String, dynamic>> transactions = [];
      final Set<String> userIds =
          bookingsSnapshot.docs.map((doc) => doc['userId'] as String).toSet();

      // Step 3: Fetch user details for the collected user IDs
      for (final userId in userIds) {
        final userDoc = await firestore.collection('users').doc(userId).get();
        final userData = userDoc.data();

        if (userData != null) {
          // Match bookings with user data
          bookingsSnapshot.docs.forEach((bookingDoc) {
            if (bookingDoc['userId'] == userId) {
              Uint8List? imageBytes;

              // Decode base64 image if available
              try {
                final base64Image = userData['image'] ?? '';
                if (base64Image.isNotEmpty) {
                  imageBytes = base64Decode(base64Image);
                }
              } catch (e) {
                print('Error decoding base64 image: $e');
              }

              transactions.add({
                'name': userData['fullName'], // Full name of the user
                'photo': imageBytes, // Store the decoded image bytes
                'price': bookingDoc['price'], // Booking price
                'date': bookingDoc['date'], // Booking date
              });
            }
          });
        }
      }
      return transactions; // Return the list of transactions
    } catch (e) {
      print("Error fetching transactions: $e"); // Log any errors
      return [];
    }
  }

  @override
  void initState() {
    super.initState(); // Initialize the dashboard state
    fetchOverviewData(); // Fetch dashboard data on initialization
  }

  // Fetch overview data (bookings, feedback, revenue) for the dashboard
  Future<void> fetchOverviewData() async {
    try {
      final FirebaseFirestore firestore = FirebaseFirestore.instance;
      final user = FirebaseAuth.instance.currentUser;

      if (user == null) {
        print(
            "No user is currently signed in."); // Log error if no user signed in
        setState(() {
          isLoading = false; // Stop loading indicator
        });
        return;
      }

      // Step 1: Fetch space IDs owned by the current user
      final spacesSnapshot = await firestore
          .collection('spaces')
          .where('ownerId', isEqualTo: user.uid)
          .get();

      final List<String> spaceIds =
          spacesSnapshot.docs.map((doc) => doc.id).toList();

      if (spaceIds.isEmpty) {
        print(
            "No spaces found for the current user."); // Log if no spaces are owned
        setState(() {
          isLoading = false; // Stop loading indicator
        });
        return;
      }

      // Step 2: Fetch booking count and revenue
      final bookingsSnapshot = await firestore
          .collection('bookings')
          .where('spaceId', whereIn: spaceIds)
          .get();

      setState(() {
        bookingCount = bookingsSnapshot.docs.length; // Update booking count
        revenue = bookingsSnapshot.docs.fold(
          0.0,
          (sum, doc) {
            final price = doc['price']; // Price of each booking
            final priceValue = (price is String)
                ? double.tryParse(price)
                : price; // Parse price
            return sum + (priceValue ?? 0.0); // Add to total revenue
          },
        );
      });

      final transactions =
          await fetchTransactions(spaceIds); // Fetch transactions
      setState(() {
        transactionList =
            transactions; // Store fetched transactions for rendering
        isLoading = false; // Stop loading indicator
      });

      // Step 3: Fetch feedback count
      final feedbackSnapshot = await firestore
          .collection('feedbacks')
          .where('spaceId', whereIn: spaceIds)
          .get();

      setState(() {
        feedbackCount = feedbackSnapshot.docs.length; // Update feedback count
        isLoading = false; // Stop loading indicator
      });
    } catch (e) {
      print("Error fetching overview data: $e"); // Log errors if any
      setState(() {
        isLoading = false; // Stop loading indicator on error
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Center(
          child: Text(
            "Dashboard", // AppBar title
            style: TextStyle(fontSize: 25, fontWeight: FontWeight.w600),
          ),
        ),
        elevation: 0, // Remove AppBar shadow
        backgroundColor: Colors.white, // AppBar background color
        foregroundColor: Colors.black, // AppBar text and icon color
        automaticallyImplyLeading: false, // Remove default back button
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0), // Padding around the body
        child: isLoading
            ? const Center(
                child: CircularProgressIndicator()) // Show loading indicator
            : Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    "Overview", // Section title
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10), // Space between elements
                  Row(
                    children: [
                      _buildStatCard(
                        title: "Booked", // Title for booked stat
                        value: "$bookingCount", // Booking count value
                        increment: "Updated", // Increment label
                        color: Colors.blue, // Color for booked stat
                        icon: Icons.event_available, // Icon for booked stat
                      ),
                      const SizedBox(width: 10),
                      _buildStatCard(
                        title: "Revenue", // Title for revenue stat
                        value: "$revenue", // Revenue value
                        increment: "Updated", // Increment label
                        color: Colors.pink, // Color for revenue stat
                        icon: Icons.currency_rupee_sharp, // Icon for revenue
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Row(
                    children: [
                      _buildStatCard(
                        title: "Feedback", // Title for feedback stat
                        value: "$feedbackCount", // Feedback count value
                        increment: "Updated", // Increment label
                        color: Colors.red, // Color for feedback stat
                        icon: Icons.feedback, // Icon for feedback stat
                      ),
                    ],
                  ),

                  const SizedBox(height: 20),
                  const Text(
                    "Transactions", // Section title
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  _buildTransactionList(), // Render transactions list
                ],
              ),
      ),
    );
  }

  // Build a single stat card widget
  Widget _buildStatCard({
    required String title,
    required String value,
    required String increment,
    required Color color,
    required IconData icon, // Icon to display in the stat card
  }) {
    return Expanded(
      child: Container(
        padding: const EdgeInsets.all(16.0), // Padding inside the card
        decoration: BoxDecoration(
          color: color.withOpacity(0.1), // Card background color
          borderRadius: BorderRadius.circular(10), // Rounded corners
        ),
        child: Row(
          children: [
            // Icon section
            CircleAvatar(
              backgroundColor: color.withOpacity(0.2), // Background color
              child: Icon(icon, color: color), // Icon color
            ),
            const SizedBox(width: 10),
            // Text section
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    value, // Stat value
                    style: TextStyle(
                      fontSize: 24, // Value font size
                      fontWeight: FontWeight.bold, // Bold text
                      color: color, // Text color
                    ),
                  ),
                  const SizedBox(height: 5),
                  Text(
                    title, // Stat title
                    style: TextStyle(color: color, fontSize: 14), // Text style
                  ),
                  const SizedBox(height: 5),
                  Text(
                    increment, // Increment label
                    style: TextStyle(
                      color: color, // Increment text color
                      fontSize: 12, // Font size
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  List<Map<String, dynamic>> transactionList = []; // Transactions list

  // Build transaction list widget
  Widget _buildTransactionList() {
    return ListView.builder(
      shrinkWrap: true, // Limit the height of the list
      itemCount: transactionList.length, // Number of transactions
      itemBuilder: (context, index) {
        final transaction = transactionList[index]; // Transaction data
        return ListTile(
          contentPadding:
              const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
          leading: CircleAvatar(
            backgroundImage: transaction['photo'] != null
                ? MemoryImage(transaction['photo']) // Show user's photo
                : const AssetImage('assets/applogo.png') as ImageProvider,
            radius: 24, // Avatar radius
          ),
          title: Text(
            transaction['name'] ?? 'Unknown', // User's name
            style: const TextStyle(fontWeight: FontWeight.bold), // Bold text
          ),
          subtitle: Text(
            transaction['date']?.toString() ?? 'No date', // Booking date
            style: const TextStyle(color: Colors.grey), // Subtitle text style
          ),
          trailing: Text(
            "Rs ${transaction['price'] ?? '0.00'}", // Booking price
            style: const TextStyle(
              color: Colors.green, // Price text color
              fontWeight: FontWeight.bold, // Bold text
            ),
          ),
        );
      },
    );
  }
}
